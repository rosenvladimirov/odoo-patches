diff --git a/addons/account/account_invoice.py b/addons/account/account_invoice.py
index 97c4685..be53248 100644
--- a/addons/account/account_invoice.py
+++ b/addons/account/account_invoice.py
@@ -19,6 +19,7 @@
 #
 ##############################################################################
 
+import logging
 import itertools
 from lxml import etree
 
@@ -27,6 +28,8 @@ from openerp.exceptions import except_orm, Warning, RedirectWarning
 from openerp.tools import float_compare
 import openerp.addons.decimal_precision as dp
 
+_logger = logging.getLogger(__name__)
+
 # mapping invoice type to journal type
 TYPE2JOURNAL = {
     'out_invoice': 'sale',
@@ -64,7 +67,15 @@ class account_invoice(models.Model):
     @api.depends('invoice_line.price_subtotal', 'tax_line.amount')
     def _compute_amount(self):
         self.amount_untaxed = sum(line.price_subtotal for line in self.invoice_line)
-        self.amount_tax = sum(line.amount for line in self.tax_line)
+        self.amount_tax_credit = 0.0
+        self.amount_tax_payable = 0.0
+        tax_advpayable = 0.0
+        for line in self.tax_line:
+            self.amount_tax_credit += line.amount*line.tax_parent_sign if line.tax_credit_payable == 'taxcredit' else 0
+            self.amount_tax_payable += line.amount*line.tax_parent_sign if line.tax_credit_payable == 'taxpay' else 0
+            tax_advpayable += line.amount*line.tax_parent_sign if line.tax_credit_payable == 'taxadvpay' else 0
+        self.amount_tax = self.amount_tax_payable + self.amount_tax_credit
+        self.amount_tax_payable += tax_advpayable
         self.amount_total = self.amount_untaxed + self.amount_tax
 
     @api.model
@@ -121,10 +132,15 @@ class account_invoice(models.Model):
     # the residual amount between all invoice)
     def _compute_residual(self):
         self.residual = 0.0
+        residual_s = max(self.residual, 0.0)
         # Each partial reconciliation is considered only once for each invoice it appears into,
         # and its residual amount is divided by this number of invoices
         partial_reconciliations_done = []
         for line in self.sudo().move_id.line_id:
+            _logger.info("account_id.type: %s line.reconcile_partial_id: %s self.residual: %s" % (line.account_id.type, line.reconcile_partial_id.id, self.residual))
+            if line.account_separate:
+                self.residual = max(residual_s, 0.0)
+                continue
             if line.account_id.type not in ('receivable', 'payable'):
                 continue
             if line.reconcile_partial_id and line.reconcile_partial_id.id in partial_reconciliations_done:
@@ -161,6 +177,7 @@ class account_invoice(models.Model):
         data_lines = self.move_id.line_id.filtered(lambda l: l.account_id == self.account_id)
         partial_lines = self.env['account.move.line']
         for data_line in data_lines:
+            _logger.info("_compute_move_lines %s:" % partial_lines)
             if data_line.reconcile_id:
                 lines = data_line.reconcile_id.line_id
             elif data_line.reconcile_partial_id:
@@ -194,7 +211,7 @@ class account_invoice(models.Model):
         readonly=True, states={'draft': [('readonly', False)]})
     supplier_invoice_number = fields.Char(string='Supplier Invoice Number',
         help="The reference of this invoice as provided by the supplier.",
-        readonly=True, states={'draft': [('readonly', False)]})
+        required=False, readonly=True, states={'draft': [('readonly', False),('required',True)]})
     type = fields.Selection([
             ('out_invoice','Customer Invoice'),
             ('in_invoice','Supplier Invoice'),
@@ -269,6 +286,10 @@ class account_invoice(models.Model):
         store=True, readonly=True, compute='_compute_amount', track_visibility='always')
     amount_tax = fields.Float(string='Tax', digits=dp.get_precision('Account'),
         store=True, readonly=True, compute='_compute_amount')
+    amount_tax_credit = fields.Float(string='Tax credit', digits=dp.get_precision('Account'),
+        store=True, readonly=True, compute='_compute_amount')
+    amount_tax_payable = fields.Float(string='Tax payable', digits=dp.get_precision('Account'),
+        store=True, readonly=True, compute='_compute_amount')
     amount_total = fields.Float(string='Total', digits=dp.get_precision('Account'),
         store=True, readonly=True, compute='_compute_amount')
 
@@ -696,7 +717,7 @@ class account_invoice(models.Model):
         return True
 
     @api.multi
-    def finalize_invoice_move_lines(self, move_lines):
+    def finalize_invoice_move_lines(self, move_lines, move_lines_s):
         """ finalize_invoice_move_lines(move_lines) -> move_lines
 
             Hook method to be overridden in additional modules to verify and
@@ -705,7 +726,7 @@ class account_invoice(models.Model):
             :param move_lines: list of dictionaries with the account.move.lines (as for create())
             :return: the (possibly updated) final move_lines to create for this invoice
         """
-        return move_lines
+        return move_lines, move_lines_s
 
     @api.multi
     def check_tax_lines(self, compute_taxes):
@@ -736,6 +757,8 @@ class account_invoice(models.Model):
         total = 0
         total_currency = 0
         for line in invoice_move_lines:
+            if (line.get('tax_parent_sign', 0.0) != 0.0):
+                line['price'] = line['price'] * line['tax_parent_sign']
             if self.currency_id != company_currency:
                 currency = self.currency_id.with_context(date=self.date_invoice or fields.Date.context_today(self))
                 line['currency_id'] = currency.id
@@ -753,6 +776,9 @@ class account_invoice(models.Model):
             else:
                 total -= line['price']
                 total_currency -= line['amount_currency'] or line['price']
+#            _logger.info("Expand array %s:", (', '.join(line)) )
+            _logger.info("compute totals price %s: amount_currency %s:" % (line['price'], line['amount_currency']))
+#        _logger.info("compute inv totals: %s: %s: %s:" % (total, total_currency, invoice_move_lines))
         return total, total_currency, invoice_move_lines
 
     def inv_line_characteristic_hashcode(self, invoice_line):
@@ -817,7 +843,7 @@ class account_invoice(models.Model):
             # check if taxes are all computed
             compute_taxes = account_invoice_tax.compute(inv.with_context(lang=inv.partner_id.lang))
             inv.check_tax_lines(compute_taxes)
-
+#            _logger.info("compute tax: %s" % (compute_taxes))
             # I disabled the check_total feature
             if self.env.user.has_group('account.group_supplier_inv_check_total'):
                 if inv.type in ('in_invoice', 'in_refund') and abs(inv.check_total - inv.amount_total) >= (inv.currency_id.rounding / 2.0):
@@ -835,7 +861,9 @@ class account_invoice(models.Model):
                     raise except_orm(_('Error!'), _("Cannot create the invoice.\nThe related payment term is probably misconfigured as it gives a computed amount greater than the total invoiced amount. In order to avoid rounding issues, the latest line of your payment term must be of type 'balance'."))
 
             # one move line per tax line
-            iml += account_invoice_tax.move_line_get(inv.id)
+            iml += account_invoice_tax.move_line_get(inv.id, False)
+            # one move line per tax line separated movement
+            iml_s = account_invoice_tax.move_line_get(inv.id, True)
 
             if inv.type in ('in_invoice', 'in_refund'):
                 ref = inv.reference
@@ -845,7 +873,11 @@ class account_invoice(models.Model):
             diff_currency = inv.currency_id != company_currency
             # create one move line for the total and possibly adjust the other lines amount
             total, total_currency, iml = inv.with_context(ctx).compute_invoice_totals(company_currency, ref, iml)
-
+            total_s, total_currency_s, iml_s = inv.with_context(ctx).compute_invoice_totals(company_currency, ref, iml_s)
+#            _logger.info("total: %s total_s: %s" % (total, total_s))
+#            total = total + total_s
+#            total_currency = total_currency + total_currency_s
+            
             name = inv.supplier_invoice_number or inv.name or '/'
             totlines = []
             if inv.payment_term:
@@ -886,52 +918,88 @@ class account_invoice(models.Model):
                     'ref': ref
                 })
 
+            _logger.info("action move create iml: %s" % iml)
             date = date_invoice
 
             part = self.env['res.partner']._find_accounting_partner(inv.partner_id)
 
             line = [(0, 0, self.line_get_convert(l, part.id, date)) for l in iml]
             line = inv.group_lines(iml, line)
-
+            _logger.info("action move create line: %s" % line)
+            line_s = [(0, 0, self.line_get_convert(l, part.id, date)) for l in iml_s]
+            line_s = inv.group_lines(iml_s, line_s)
+#            _logger.info("action move create line: %s %—è" % (line, line_s))
             journal = inv.journal_id.with_context(ctx)
             if journal.centralisation:
                 raise except_orm(_('User Error!'),
                         _('You cannot create an invoice on a centralized journal. Uncheck the centralized counterpart box in the related journal from the configuration menu.'))
 
-            line = inv.finalize_invoice_move_lines(line)
-
-            move_vals = {
-                'ref': inv.reference or inv.name,
-                'line_id': line,
-                'journal_id': journal.id,
-                'date': inv.date_invoice,
-                'narration': inv.comment,
-                'company_id': inv.company_id.id,
-            }
             ctx['company_id'] = inv.company_id.id
             period = inv.period_id
             if not period:
                 period = period.with_context(ctx).find(date_invoice)[:1]
-            if period:
-                move_vals['period_id'] = period.id
-                for i in line:
-                    i[2]['period_id'] = period.id
 
             ctx['invoice'] = inv
             ctx_nolang = ctx.copy()
             ctx_nolang.pop('lang', None)
-            move = account_move.with_context(ctx_nolang).create(move_vals)
 
-            # make the invoice point to that move
-            vals = {
-                'move_id': move.id,
-                'period_id': period.id,
-                'move_name': move.name,
-            }
-            inv.with_context(ctx).write(vals)
-            # Pass invoice in context in method post: used if you want to get the same
-            # account move reference when creating the same invoice after a cancelled one:
-            move.post()
+            line, line_s = inv.finalize_invoice_move_lines(line, line_s)
+#            _logger.info("action move create total: %s iml: %s" % (total, iml))
+#            _logger.info("action move create iml_s: %s" % iml_s)
+
+            if line_s:
+                move_vals = {
+                    'ref': inv.reference or inv.name,
+                    'line_id': line_s,
+                    'journal_id': journal.id,
+                    'date': inv.date_invoice,
+                    'narration': inv.comment,
+                    'company_id': inv.company_id.id,
+                }
+                if period:
+                    move_vals['period_id'] = period.id
+                    for i in line_s:
+                        i[2]['period_id'] = period.id
+
+                move = account_move.with_context(ctx_nolang).create(move_vals)
+
+                # make the invoice point to that move
+                vals = {
+                    'move_id': move.id,
+                    'period_id': period.id,
+                    'move_name': move.name,
+                }
+                inv.with_context(ctx).write(vals)
+                # Pass invoice in context in method post: used if you want to get the same
+                # account move reference when creating the same invoice after a cancelled one:
+                move.post()
+
+            if line:
+                move_vals = {
+                    'ref': inv.reference or inv.name,
+                    'line_id': line,
+                    'journal_id': journal.id,
+                    'date': inv.date_invoice,
+                    'narration': inv.comment,
+                    'company_id': inv.company_id.id,
+                }
+                if period:
+                    move_vals['period_id'] = period.id
+                    for i in line:
+                        i[2]['period_id'] = period.id
+
+                move = account_move.with_context(ctx_nolang).create(move_vals)
+
+                # make the invoice point to that move
+                vals = {
+                    'move_id': move.id,
+                    'period_id': period.id,
+                    'move_name': move.name,
+                }
+                inv.with_context(ctx).write(vals)
+                # Pass invoice in context in method post: used if you want to get the same
+                # account move reference when creating the same invoice after a cancelled one:
+                move.post()
         self._log_event()
         return True
 
@@ -941,13 +1009,23 @@ class account_invoice(models.Model):
 
     @api.model
     def line_get_convert(self, line, part, date):
+        _logger.info("Price beffore %s" % line['price'])
+#        if (line.get('tax_parent_sign', 0.0) != 0.0):
+#            line['price'] = line['price']*line.get('tax_parent_sign', 0.0)
+        debit = line['price']>0 and line['price']
+        credit = line['price']<0 and -line['price']
+#        _logger.info("line get convert 2: %s: dt: %s cr: %s:" % (line.get('tax_parent_sign', 0.0), debit, credit))
+#        if not (line.get('tax_parent_sign', 0.0) == 0.0):
+#            debit = line['tax_parent_sign']==-1 and 0.0 or debit
+#            credit = line['tax_parent_sign']==-1 and debit or 0.0          
+        _logger.info("line get convert: account id %s: parent sign %s: type %s: dt: %s cr: %s: check parent %s: separate %s: dds id: %s" % (line['account_id'], line.get('tax_parent_sign', 0.0), line.get('type', ''), debit, credit, (line.get('tax_parent_sign', 0.0) != 0.0), line.get('account_separate', False), line.get('tax_code_id', False)))
         return {
             'date_maturity': line.get('date_maturity', False),
             'partner_id': part,
             'name': line['name'][:64],
             'date': date,
-            'debit': line['price']>0 and line['price'],
-            'credit': line['price']<0 and -line['price'],
+            'debit': debit,
+            'credit': credit,
             'account_id': line['account_id'],
             'analytic_lines': line.get('analytic_lines', []),
             'amount_currency': line['price']>0 and abs(line.get('amount_currency', False)) or -abs(line.get('amount_currency', False)),
@@ -959,6 +1037,7 @@ class account_invoice(models.Model):
             'product_id': line.get('product_id', False),
             'product_uom_id': line.get('uos_id', False),
             'analytic_account_id': line.get('account_analytic_id', False),
+            'account_separate': line.get('account_separate', False),
         }
 
     @api.multi
@@ -1222,11 +1301,13 @@ class account_invoice_line(models.Model):
     _order = "invoice_id,sequence,id"
 
     @api.one
-    @api.depends('price_unit', 'discount', 'invoice_line_tax_id', 'quantity',
+    @api.depends('price_unit', 'price_unit_vat', 'diff_price_vat', 'discount', 'invoice_line_tax_id', 'quantity',
         'product_id', 'invoice_id.partner_id', 'invoice_id.currency_id')
     def _compute_price(self):
         price = self.price_unit * (1 - (self.discount or 0.0) / 100.0)
-        taxes = self.invoice_line_tax_id.compute_all(price, self.quantity, product=self.product_id, partner=self.invoice_id.partner_id)
+        price_vat = (self.diff_price_vat and self.price_unit_vat > price) and self.price_unit_vat or False
+        _logger.info("_compute_price %s:" % self.diff_price_vat)
+        taxes = self.invoice_line_tax_id.compute_all(price, self.quantity, product=self.product_id, partner=self.invoice_id.partner_id, price_unit_vat=price_vat)
         self.price_subtotal = taxes['total']
         if self.invoice_id:
             self.price_subtotal = self.invoice_id.currency_id.round(self.price_subtotal)
@@ -1235,6 +1316,7 @@ class account_invoice_line(models.Model):
     def _default_price_unit(self):
         if not self._context.get('check_total'):
             return 0
+        amount_tax_credit = amount_tax_payable = tax_advpayable = 0.0
         total = self._context['check_total']
         for l in self._context.get('invoice_line', []):
             if isinstance(l, (list, tuple)) and len(l) >= 3 and l[2]:
@@ -1242,12 +1324,16 @@ class account_invoice_line(models.Model):
                 price = vals.get('price_unit', 0) * (1 - vals.get('discount', 0) / 100.0)
                 total = total - (price * vals.get('quantity'))
                 taxes = vals.get('invoice_line_tax_id')
+                price_vat = (vals.get('diff_price_vat', False) and vals.get('price_unit_vat', 0) > price) and vals.get('price_unit_vat', 0) or False
                 if taxes and len(taxes[0]) >= 3 and taxes[0][2]:
                     taxes = self.env['account.tax'].browse(taxes[0][2])
-                    tax_res = taxes.compute_all(price, vals.get('quantity'),
-                        product=vals.get('product_id'), partner=self._context.get('partner_id'))
+                    tax_res = taxes.compute_all(price_vat, vals.get('quantity'),
+                        product=vals.get('product_id'), partner=self._context.get('partner_id'), price_unit_vat=price_vat)
                     for tax in tax_res['taxes']:
-                        total = total - tax['amount']
+                        amount_tax_credit += tax['amount']*tax['tax_parent_sign'] if tax['tax_credit_payable'] == 'taxcredit' else 0
+                        amount_tax_payable += tax['amount']*tax['tax_parent_sign'] if tax['tax_credit_payable'] == 'taxpay' else 0
+                        tax_advpayable += tax['amount']*tax['tax_parent_sign'] if tax['tax_credit_payable'] == 'taxadvpay' else 0
+                        total = total - (amount_tax_payable + amount_tax_credit + tax_advpayable)
         return total
 
     @api.model
@@ -1278,6 +1364,8 @@ class account_invoice_line(models.Model):
     price_unit = fields.Float(string='Unit Price', required=True,
         digits= dp.get_precision('Product Price'),
         default=_default_price_unit)
+    price_unit_vat = fields.Float(string='Unit Price for VAT', required=True, digits_compute= dp.get_precision('Product Price'), readonly=True, states={'draft': [('readonly', False)]})
+    diff_price_vat = fields.Boolean(string='is have VAT price', help="If unchecked, it will allow to work with two price one for sale/purchase and one for VAT calculations.")
     price_subtotal = fields.Float(string='Amount', digits= dp.get_precision('Account'),
         store=True, readonly=True, compute='_compute_price')
     quantity = fields.Float(string='Quantity', digits= dp.get_precision('Product Unit of Measure'),
@@ -1425,9 +1513,10 @@ class account_invoice_line(models.Model):
             mres['invl_id'] = line.id
             res.append(mres)
             tax_code_found = False
-            taxes = line.invoice_line_tax_id.compute_all(
-                (line.price_unit * (1.0 - (line.discount or 0.0) / 100.0)),
-                line.quantity, line.product_id, inv.partner_id)['taxes']
+            price = (line.price_unit * (1.0 - (line.discount or 0.0) / 100.0))
+            price_vat = line.price_unit_vat if (line.diff_price_vat and line.price_unit_vat > price) else False
+            _logger.info("Line id: %s account id: %s price: %s: %s: %s:" % (mres['invl_id'], mres['account_id'], mres['price'], line.diff_price_vat, line.price_unit_vat))
+            taxes = line.invoice_line_tax_id.compute_all(price, line.quantity, line.product_id, inv.partner_id, price_unit_vat=price_vat)['taxes']
             for tax in taxes:
                 if inv.type in ('out_invoice', 'in_invoice'):
                     tax_code_id = tax['base_code_id']
@@ -1439,6 +1528,8 @@ class account_invoice_line(models.Model):
                 if tax_code_found:
                     if not tax_code_id:
                         continue
+                    if tax['account_separate']:
+                        continue
                     res.append(dict(mres))
                     res[-1]['price'] = 0.0
                     res[-1]['account_analytic_id'] = False
@@ -1448,7 +1539,7 @@ class account_invoice_line(models.Model):
 
                 res[-1]['tax_code_id'] = tax_code_id
                 res[-1]['tax_amount'] = currency.compute(tax_amount, company_currency)
-
+                _logger.info("Get line price: %s and tax sing:%s and tax:%s" % (tax["price_unit"], tax["tax_parent_sign"], tax['amount']))
         return res
 
     @api.model
@@ -1504,8 +1595,15 @@ class account_invoice_tax(models.Model):
     account_id = fields.Many2one('account.account', string='Tax Account',
         required=True, domain=[('type', 'not in', ['view', 'income', 'closed'])])
     account_analytic_id = fields.Many2one('account.analytic.account', string='Analytic account')
+    account_separate = fields.Boolean(string='Separate movement', default=False)
     base = fields.Float(string='Base', digits=dp.get_precision('Account'))
     amount = fields.Float(string='Amount', digits=dp.get_precision('Account'))
+    tax_parent_sign = fields.Float(string='Parent sign taxes', digits=dp.get_precision('Account'),
+        default=1.0)
+#    child_depend = fields.Boolean('Tax on Children', default=False)
+    tax_credit_payable = fields.Char(string='Who pays tax',
+        required=True)
+    tax_conditional = fields.Boolean(string='Tax under condition', default=False)
     manual = fields.Boolean(string='Manual', default=True)
     sequence = fields.Integer(string='Sequence',
         help="Gives the sequence order when displaying a list of invoice tax.")
@@ -1551,14 +1649,17 @@ class account_invoice_tax(models.Model):
         currency = invoice.currency_id.with_context(date=invoice.date_invoice or fields.Date.context_today(invoice))
         company_currency = invoice.company_id.currency_id
         for line in invoice.invoice_line:
-            taxes = line.invoice_line_tax_id.compute_all(
-                (line.price_unit * (1 - (line.discount or 0.0) / 100.0)),
-                line.quantity, line.product_id, invoice.partner_id)['taxes']
+            price = (line.price_unit * (1 - (line.discount or 0.0) / 100.0))
+            price_vat =  (line.diff_price_vat and line.price_unit_vat > price) and line.price_unit_vat or False
+            taxes = line.invoice_line_tax_id.compute_all(price, line.quantity, line.product_id, invoice.partner_id, price_unit_vat=price_vat)['taxes']
             for tax in taxes:
                 val = {
                     'invoice_id': invoice.id,
                     'name': tax['name'],
                     'amount': tax['amount'],
+                    'tax_parent_sign': tax['tax_parent_sign'],
+                    'account_separate': tax['account_separate'],
+                    'tax_credit_payable': tax['tax_credit_payable'],
                     'manual': False,
                     'sequence': tax['sequence'],
                     'base': currency.round(tax['price_unit'] * line['quantity']),
@@ -1600,7 +1701,8 @@ class account_invoice_tax(models.Model):
             t['amount'] = currency.round(t['amount'])
             t['base_amount'] = currency.round(t['base_amount'])
             t['tax_amount'] = currency.round(t['tax_amount'])
-
+            _logger.info("tax_grouped detail amount:%s base:%s tax:%s sign:%s" % (t['amount'], t['base_amount'], t['tax_amount'], t['tax_parent_sign']))
+        # _logger.info("tax_grouped amount:%s base:%s tax:%s" % (tax_grouped[key]['amount'], tax_grouped[key]['base_amount'], tax_grouped[key]['tax_amount']))
         return tax_grouped
 
     @api.v7
@@ -1610,26 +1712,39 @@ class account_invoice_tax(models.Model):
         return account_invoice_tax.compute(recs, invoice)
 
     @api.model
-    def move_line_get(self, invoice_id):
+    def move_line_get(self, invoice_id, separate):
+        amount_tax_credit = amount_tax_payable = amount_tax_advpayable = 0.0
+
         res = []
         self._cr.execute(
             'SELECT * FROM account_invoice_tax WHERE invoice_id = %s',
             (invoice_id,)
         )
         for row in self._cr.dictfetchall():
+            _logger.info("Tax mode separated %s == %s" % (row['account_separate'], separate))
             if not (row['amount'] or row['tax_code_id'] or row['tax_amount']):
                 continue
+            if not (row['account_separate'] == separate):
+                continue
+            amount_tax_credit += row['amount']*row['tax_parent_sign'] if row['tax_credit_payable'] == 'taxcredit' else 0
+            amount_tax_payable += row['amount']*row['tax_parent_sign'] if row['tax_credit_payable'] == 'taxpay' else 0
+            amount_tax_advpayable += row['amount']*row['tax_parent_sign'] if row['tax_credit_payable'] == 'taxadvpay' else 0
             res.append({
                 'type': 'tax',
                 'name': row['name'],
                 'price_unit': row['amount'],
                 'quantity': 1,
                 'price': row['amount'] or 0.0,
+#                'price': (amount_tax_credit + amount_tax_payable + amount_tax_advpayable) or 0.0,
                 'account_id': row['account_id'],
                 'tax_code_id': row['tax_code_id'],
                 'tax_amount': row['tax_amount'],
+                'tax_parent_sign': row['tax_parent_sign'],
                 'account_analytic_id': row['account_analytic_id'],
+                'tax_credit_payable':  row['tax_credit_payable'],
+                'account_separate': row['account_separate'],
             })
+#        _logger.info("get move price: %s-%s-%s" % (amount_tax_credit + amount_tax_payable + amount_tax_advpayable, separate, row['account_separate']))
         return res
 
 